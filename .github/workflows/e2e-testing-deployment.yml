name: E2E Testing Flow
on:
  push:
    branches:
      - 'feat/add-playwright-e2e-test-flow'
  pull_request:
    branches:
      - 'feat/add-playwright-e2e-test-flow'

jobs:
  set_test_env_polkadot_node:
    name: Set test environment - Polkadot-node
    runs-on: ubuntu-latest
    steps:
      - name: Clone Polkadot-node
        run: |
          git clone https://github.com/paritytech/polkadot.git

      - name: Cache binary file for Polkadot-node
        id: cache-bin-polkadot-node
        uses: actions/cache@v2
        with:
          path: polkadot/target/release
          key: bin-polkadot-node-3-${{ hashFiles('polkadot/Cargo.lock') }}

      - name: Fetch Polkadot-node bin file
        if: steps.cache-bin-polkadot-node.outputs.cache-hit != 'true'
        run: |
          cd polkadot
          mkdir -p target
          cd target
          mkdir -p release
          cd release
          wget https://github.com/paritytech/polkadot/releases/download/v0.9.13/polkadot

      - name: Make Polkadot-node bin executanle
        run: |
          cd polkadot/target/release
          chmod +x polkadot

      - name: Save artifacts - Polkadot-node
        uses: actions/upload-artifact@v2
        with:
          name: polkadot-node-artifacts
          path: ./polkadot/target/release

  set_test_env_basilisk_node:
    name: Set test environment - Basilisk-node
    runs-on: ubuntu-latest
    steps:
      - name: Clone Basilisk-node
        run: |
          git clone https://github.com/galacticcouncil/Basilisk-node.git

      - name: Cache binary file for Basilisk-node
        id: cache-bin-basilisk-node
        uses: actions/cache@v2
        with:
          path: Basilisk-node/target/release
          key: bin-basilisk-node-5-${{ hashFiles('Basilisk-node/Cargo.lock') }}

      - name: Fetch Basilisk-node bin file
        if: steps.cache-bin-basilisk-node.outputs.cache-hit != 'true'
        run: |
          cd Basilisk-node
          mkdir -p target
          cd target
          mkdir -p release
          cd release
          wget https://github.com/galacticcouncil/Basilisk-node/releases/download/v6.0.0/basilisk
          cp -v basilisk testing-basilisk
          ls

      - name: Make Basilisk-node bin executanle
        run: |
          cd Basilisk-node/target/release
          chmod +x basilisk
          chmod +x testing-basilisk

      - name: Save artifacts - Basilisk-node
        uses: actions/upload-artifact@v2
        with:
          name: basilisk-node-artifacts
          path: ./Basilisk-node

  build_app:
    name: Build UI application
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 14.x

      - name: Cache Node Modules for ui-app
        id: cache-node-modules-ui-app
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node-modules-ui-app-${{ hashFiles('yarn.lock') }}

      - name: Install Dependencies for ui-app
        if: steps.cache-node-modules-ui-app.outputs.cache-hit != 'true'
        run: |
          npm install
          npm ci

      - name: Update browserslist
        run: npx browserslist@latest --update-db

      - name: Build App and Storybook
        run: |
          npm run build
          npm run build-storybook -- -o sb-build-files
        env:
          CI: false

      - name: Upload script files
        uses: actions/upload-artifact@v2
        with:
          name: script-files
          path: ./scripts

      - name: Upload production-ready SB build files
        uses: actions/upload-artifact@v2
        with:
          name: sb-build-files
          path: ./sb-build-files

      - name: Upload production-ready App build files
        uses: actions/upload-artifact@v2
        with:
          name: app-build-files
          path: ./build

  run_tests:
    name: Run tests
    runs-on: ubuntu-latest
    needs:
      [ set_test_env_polkadot_node, set_test_env_basilisk_node, build_app ]
    steps:
      - uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Download artifact - Basilisk-node
        uses: actions/download-artifact@v2
        with:
          name: basilisk-node-artifacts
          path: ./Basilisk-node

      - name: Download artifact - Polkadot-node
        uses: actions/download-artifact@v2
        with:
          name: polkadot-node-artifacts
          path: ./polkadot/target/release

      - uses: actions/checkout@v2
        with:
          path: 'ui-app'

      - name: Download artifact - UI app build
        uses: actions/download-artifact@v2
        with:
          name: app-build-files
          path: ./ui-app

      - name: Download artifact - Storybook build
        uses: actions/download-artifact@v2
        with:
          name: sb-build-files
          path: ./ui-app

      # Prepare Basilisk-api

      - name: Clone Basilisk-api
        run: git clone -b develop https://github.com/galacticcouncil/Basilisk-api.git

      - name: Cache Node Modules for Basilisk-api
        id: cache-node-modules-basilisk-api
        uses: actions/cache@v2
        with:
          path: Basilisk-api/node_modules
          key: node-modules-basilisk-api-${{ hashFiles('Basilisk-api/yarn.lock') }}

      - name: Install Dependencies for Basilisk-api
        if: steps.cache-node-modules-basilisk-api.outputs.cache-hit != 'true'
        run: |
          cd Basilisk-api
          yarn

      # Prepare UI-app

      - name: Cache Node Modules for ui-app
        id: cache-node-modules-ui-app
        uses: actions/cache@v2
        with:
          path: ui-app/node_modules
          key: node-modules-ui-app-${{ hashFiles('ui-app/yarn.lock') }}

      - name: Install Dependencies for ui-app
        if: steps.cache-node-modules-ui-app.outputs.cache-hit != 'true'
        run: |
          cd ui-app
          npm install
          npm ci

      # Update folders structure

      - name: Change folders permissions
        run: |
          chmod -R 777 polkadot
          chmod -R 777 Basilisk-node
          chmod -R 777 Basilisk-api
          chmod -R 777 ui-app

      # Prepare Rust Env

      - name: Configure Rust Env
        run: curl https://getsubstrate.io -sSf | bash -s -- --fast

      # Run tests

      - name: Run testnet
        shell: bash
        run: |
          cd Basilisk-api
          yarn testnet:start &

      - name: Sleep for 20 seconds
        run: sleep 20s
        shell: bash

      - name: Run UI application
        shell: bash
        run: |
          cd ui-app
          yarn start

      - name: Sleep for 20 seconds
        run: sleep 20s
        shell: bash

      - name: Install operating system dependencies for playwright
        run: npx playwright install-deps

      - name: Run e2e tests
        shell: bash
        run: |
          cd ui-app
          DEBUG=pw:browser* HEADFUL=true xvfb-run --auto-servernum -- yarn test:e2e-ci
        env:
          PLAYWRIGHT_TEST_BASE_URL: ${{ github.event.deployment_status.target_url }}
          E2E_TEST_ACCOUNT_NAME_ALICE: ${{ secrets.E2E_TEST_ACCOUNT_NAME_ALICE }}
          E2E_TEST_ACCOUNT_PASSWORD_ALICE: ${{ secrets.E2E_TEST_ACCOUNT_PASSWORD_ALICE }}
          E2E_TEST_ACCOUNT_SEED_ALICE: ${{ secrets.E2E_TEST_ACCOUNT_SEED_ALICE }}

      - name: Upload trace files
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: traces_screenshots
          path: ./ui-app/traces

      - name: Run unit tests
        run: yarn test:ci

      - name: Stop testnet
        if: always()
        shell: bash
        run: |
          killall -q -v polkadot
          killall -q -v testing-basilisk
      # cd Basilisk-api
      # yarn testnet:stop

      - name: Sleep for 10 seconds
        run: sleep 10
        shell: bash

  purge_testnet_artifacts:
    name: Purge testnet artifacts
    runs-on: ubuntu-latest
    needs: run_tests
    steps:
      - uses: geekyeggo/delete-artifact@v1
        with:
          name: |
            basilisk-node-artifacts
            polkadot-node-artifacts

#  clear_build:
#    name: Clear existing build
#    runs-on: ubuntu-latest
#    needs: run_tests
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v2
#
#      - name: Check gh-pages branch existence
#        shell: bash
#        run: |
#          chmod -R 777 ./scripts
#          echo "##[set-output name=is_ghp_branch_exists;]$(./scripts/gh-actions-is-branch-exists.sh "$GH_PAGES_FULL_BRANCH")"
#        env:
#          GH_PAGES_FULL_BRANCH: ${{ secrets.GH_PAGES_FULL_BRANCH }}
#        id: ghp_branch_existence
#
#      - name: Checkout gh-pages branch
#        if: ${{ steps.ghp_branch_existence.outputs.is_ghp_branch_exists == 'true' }}
#        uses: actions/checkout@v2
#        with:
#          ref: ${{ secrets.GH_PAGES_FULL_BRANCH }}
#
#      - name: Download artifact
#        if: ${{ steps.ghp_branch_existence.outputs.is_ghp_branch_exists == 'true' }}
#        uses: actions/download-artifact@v2
#        with:
#          name: script-files
#          path: ./scripts
#
#      - name: Update script file
#        if: ${{ steps.ghp_branch_existence.outputs.is_ghp_branch_exists == 'true' }}
#        shell: bash
#        run: chmod -R 777 ./scripts/gh-actions-branch-name-serialize.sh
#
#      - name: Extract branch folder name
#        if: ${{ steps.ghp_branch_existence.outputs.is_ghp_branch_exists == 'true' }}
#        shell: bash
#        run: |
#          if [[ $GITHUB_EVENT_NAME = 'push' ]]
#          then
#            echo "##[set-output name=folder_name;]$GITHUB_WORKSPACE/$(./scripts/gh-actions-branch-name-serialize.sh "${GITHUB_REF#refs/heads/}")"
#          elif [[ $GITHUB_EVENT_NAME = 'pull_request' ]]
#          then
#            echo "##[set-output name=folder_name;]$GITHUB_WORKSPACE/$(./scripts/gh-actions-branch-name-serialize.sh "$GITHUB_BASE_REF")"
#          else
#            echo "##[set-output name=folder_name;]$GITHUB_WORKSPACE/$(./scripts/gh-actions-branch-name-serialize.sh "${GITHUB_REF#refs/heads/}")"
#          fi
#        id: branch_folder_name
#
#      - name: Remove Existing build (app and storybook)
#        uses: JesseTG/rm@v1.0.2
#        if: ${{ success() && steps.ghp_branch_existence.outputs.is_ghp_branch_exists == 'true' }}
#        with:
#          path: ${{ steps.branch_folder_name.outputs.folder_name }}
#
#      - name: Remove redundant files from the current branch
#        if: ${{ steps.ghp_branch_existence.outputs.is_ghp_branch_exists == 'true' }}
#        shell: bash
#        run: rm -r ./scripts
#
#      - name: Commit changes
#        uses: stefanzweifel/git-auto-commit-action@v4
#        if: steps.auto-commit-action.outputs.changes_detected == 'true' && steps.ghp_branch_existence.outputs.is_ghp_branch_exists == 'true'
#        with:
#          branch: ${{ secrets.GH_PAGES_FULL_BRANCH }}

#  deploy:
#    name: Deploy new builds
#    if: ${{ always() && needs.run_tests.result=='success' }}
#    needs: [ run_tests, clear_build ]
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#
#      - name: Download artifact - Storybook (build files)
#        uses: actions/download-artifact@v2
#        with:
#          name: sb-build-files
#          path: ./sb-build-files
#
#      - name: Download artifact - App (build files)
#        uses: actions/download-artifact@v2
#        with:
#          name: app-build-files
#          path: ./app-build-files
#
#      - name: Download artifact
#        uses: actions/download-artifact@v2
#        with:
#          name: script-files
#          path: ./scripts
#
#      - name: Extract branch folder name
#        shell: bash
#        run: |
#          if [[ $GITHUB_EVENT_NAME = 'push' ]]
#          then
#            echo "##[set-output name=branch;]$(./scripts/gh-actions-branch-name-serialize.sh "${GITHUB_REF#refs/heads/}")"
#          elif [[ $GITHUB_EVENT_NAME = 'pull_request' ]]
#          then
#            echo "##[set-output name=branch;]$(./scripts/gh-actions-branch-name-serialize.sh "$GITHUB_BASE_REF")"
#          else
#            echo "##[set-output name=branch;]$(./scripts/gh-actions-branch-name-serialize.sh "${GITHUB_REF#refs/heads/}")"
#          fi
#        id: extract_branch
#
#      - name: Deploy Storybook to GH Pages
#        uses: peaceiris/actions-gh-pages@v3
#        with:
#          github_token: ${{ secrets.GH_TOKEN }}
#          publish_branch: ${{ secrets.GH_PAGES_FULL_BRANCH }}
#          publish_dir: ./sb-build-files
#          destination_dir: ${{ format('{0}/{1}', steps.extract_branch.outputs.branch, 'storybook') }}
#
#      - name: Deploy App to GH Pages
#        uses: peaceiris/actions-gh-pages@v3
#        with:
#          github_token: ${{ secrets.GH_TOKEN }}
#          publish_branch: ${{ secrets.GH_PAGES_FULL_BRANCH }}
#          publish_dir: ./app-build-files
#          destination_dir: ${{ format('{0}/{1}', steps.extract_branch.outputs.branch, 'app') }}
